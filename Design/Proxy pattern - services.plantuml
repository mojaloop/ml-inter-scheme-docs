@startuml

title Multi-Scheme Services

participant "Payer DFSP" as payerDFSP
box "Scheme A"
    participant "Services Handler" as services_A
    participant "Proxy Cache\nScheme A" as pc_A
end box
participant "Proxy AB" as xnp
box "Scheme B"
    participant "Services Handler" as services_B
end box
participant "Foreign Exchange Provider" as FXP
autonumber 1 "<b>[0]"

=== POST Services ==
FXP ->> services_B: **POST** /services/FXP
note right
 header source = FXP
body
{
  [
  "FromCurrency": "XXX",
  "ToCurrency": "XTS"
  ]
}
end note
services_B -->> FXP: 200 OK
loop for All Participants in Scheme B
  services_B -> xnp: **POST** /services/FXP
  xnp ->> services_A: **POST** /services/FXP
  services_A -->> xnp: 200 OK
  xnp -->> services_B: 200 OK
  loop for All Participant in Scheme A
    services_A -> payerDFSP: **POST** /services/FXP
    payerDFSP -->> services_A: 200 OK
    payerDFSP->payerDFSP: Validated JWS from FXP
    payerDFSP->payerDFSP: Add to local store of services
  end loop
end loop

=== DELETE Services ==
FXP ->> services_B: **DELETE** /services/FXP
note right
 header source = FXP
body
{
  [
  "FromCurrency": "XXX",
  "ToCurrency": "XTS"
  ]
}
JWS signed by FXP
end note
services_B -->> FXP: 200 OK
loop for All Participants in Scheme B
  services_B -> xnp: **DELETE** /services/FXP
  xnp ->> services_A: **DELETE** /services/FXP
  services_A -->> xnp: 200 OK
  xnp -->> services_B: 200 OK
  loop for All Participant in Scheme A
    services_A -> payerDFSP: **DELETE** /services/FXP
    payerDFSP -->> services_A: 200 OK
    payerDFSP->payerDFSP: Validated JWS from FXP
    payerDFSP->payerDFSP: Remove service from local store of services
  end loop
end loop

=== GET Services ==
payerDFSP ->> services_A: **GET** /services/{Type}/{currency}/{currency}
note left
 header source = payerDFSP
end note
services_A -->> payerDFSP: 202 OK
  services_A -> services_A: Retrieve Services registered in Scheme A
  services_A ->> payerDFSP: **PUT** /services
   note right
    header desitination = payerDFSP
    source = 'Scheme A'
    {
      "providers": [FXP1]
    }
   JWS signed by Scheme A
   end note
   payerDFSP -->> services_A: 200 OK
payerDFSP->payerDFSP: Validated JWS from Scheme A
payerDFSP->payerDFSP: Add to local store of services

  services_A ->> services_A: Are there any proxies in Scheme A?
  loop for all Proxys in Scheme A and not source    
    services_A ->> xnp: **GET** /services/{Type}/{currency}/{currency}      
    xnp -->> services_A: 202 OK

    xnp->xnp: Add header
    note left
    fxpiop-proxy = "Proxy AB"
    end note

    xnp ->> services_B: **GET** /services/{Type}/{currency}/{currency}
    services_B -->> xnp: 202 OK
    xnp -->> services_A: 202 OK

    services_B-> services_B: Retrieve Services registered in Scheme B
    services_B ->> xnp: **PUT** /services
note right
header desitination = payerDFSP
source = 'Scheme B'
{
  "providers": [FXP2]
}
JWS signed by Scheme B
end note    
    xnp->xnp: Add header
    note left
    fxpiop-proxy = "Proxy AB"
    end note
    
    xnp ->> services_A: **PUT** /services
    services_A -->> xnp: 200 OK
    xnp -->> services_B: 200 OK
    services_B->services_B: Are there any proxies in Scheme B?\n **No**

    services_A -> pc_A: Lookup payerDFSP proxy
    services_A ->> payerDFSP: **PUT** /services

    payerDFSP -->> services_A: 200 OK
    payerDFSP->payerDFSP: Validated JWS from Scheme B
    payerDFSP->payerDFSP: Add to local store of services
  end loop


@enduml